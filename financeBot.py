import telebot
import kb_financebot as kb
import financeBot_baza as baza
import web_scraping


bot = telebot.TeleBot('API_TOKEN')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    check_user = baza.check_user(message.from_user.id)
    if not check_user:
        bot.send_message(message.from_user.id,
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å —É—á–µ—Ç–æ–º –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."
                         "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏.".format(message.from_user, bot.get_me()),
                         reply_markup=kb.start_kb())
        bot.register_next_step_handler(message, inc_exp)
    else:
        bot.send_message(message.from_user.id,
                         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.actions())
        bot.register_next_step_handler(message, finance)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–∞–π–ª–æ–º –∏ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['text', 'photo', 'document'])
def finance(message):
    if message.text == 'üí∞–î–æ—Ö–æ–¥—ã/–†–∞—Å—Ö–æ–¥—ã':
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏', reply_markup=kb.inc_exp())
        bot.register_next_step_handler(message, inc_exp)
    elif message.text == 'üóÇExcel':
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å', reply_markup=kb.excel_files())
        bot.register_next_step_handler(message, get_files)

# –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –≤–Ω–µ—Å–µ–Ω–∏—è –î–æ—Ö–æ–¥–æ–≤/–†–∞—Å—Ö–æ–¥–æ–≤
def inc_exp(message):
    if message.text == 'üîô–ù–∞–∑–∞–¥':
        bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
        bot.register_next_step_handler(message, start)
    elif message.text == 'üí∏–î–æ—Ö–æ–¥—ã':
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞', reply_markup=kb.type_inc())
        bot.register_next_step_handler(message, get_inc)
    elif message.text == 'üí∏–†–∞—Å—Ö–æ–¥—ã':
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–µ—Å—Ç–∏ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã', reply_markup=kb.exp_types())
        bot.register_next_step_handler(message, get_exp)

# –¢–∏–ø –¥–æ—Ö–æ–¥–∞
def get_inc(message):
    type_inc = message.text
    bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞')
    bot.register_next_step_handler(message, checker_inc, type_inc)

# –í–Ω–µ—Å–µ–Ω–∏–µ —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
def checker_inc(message, type_inc):
    try:
        sum_inc = float(message.text)
        if sum_inc>=0:
            baza.add_income(message.from_user.id, type_inc, sum_inc)

            bot.send_message(message.from_user.id,
                             '–í–∞—à–∏ –¥–æ—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                             reply_markup=kb.start_kb())
            bot.register_next_step_handler(message, start)
        else:
            bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞')
            bot.register_next_step_handler(message, checker_inc, type_inc)

    except ValueError:
        bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –≤ —á–∏—Å–ª–∞—Ö')
        bot.register_next_step_handler(message, checker_inc, type_inc)

# –í—ã–±–æ—Ä –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
def get_exp(message):
    if message.text == 'üîô–ù–∞–∑–∞–¥':
        bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
        bot.register_next_step_handler(message, start)
    elif message.text == '–í—Ä—É—á–Ω—É—é':
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞', reply_markup=kb.categories())
        bot.register_next_step_handler(message, get_cat)
    elif message.text == 'QRcode':
        bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ QRcode, –∏—Å–ø–æ–ª—å–∑—É—è üìé', reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_qr_exp)

# –í–Ω–µ—Å–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ qr –∫–æ–¥
def get_qr_exp(message):
    from pathlib import Path
    Path(f'files/{message.chat.id}/').mkdir(parents=True, exist_ok=True)
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = f'files/{message.chat.id}/' + file_info.file_path.replace('photos/', '')
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        page = web_scraping.decode(src)
        try:
            list_name = web_scraping.pr_name(page)
            cat_list = web_scraping.category(page)
            list_number = web_scraping.pr_number(page)
            list_sum = web_scraping.pr_sum(page)
            year = web_scraping.get_year(page)
            month = web_scraping.get_month(page)
            date = web_scraping.get_date(page)

            for i in range(len(list_name)):
                name = list_name[i]
                category = cat_list[i]
                number = list_number[i]
                pr_sum = list_sum[i]
                baza.add_qr_expenses(message.from_user.id, category, name, number, pr_sum, year, month, date)

            bot.send_message(message.from_user.id, '–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, '
                                                   '—á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.actions())
            bot.register_next_step_handler(message, start)
        except ValueError:
            bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É')
            bot.register_next_step_handler(message, get_qr_exp)

# –í–Ω–µ—Å–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
def get_cat(message):
    category = message.text
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/—É—Å–ª—É–≥–∏')
    bot.register_next_step_handler(message, get_item, category)

# –í–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
def get_item(message, category):
    item = message.text
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞/—É—Å–ª—É–≥–∏')
    bot.register_next_step_handler(message, get_num, category, item)

# –í–Ω–µ—Å–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Ö–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
def get_num(message, category, item):
    try:
        num = float(message.text)
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞')
        bot.register_next_step_handler(message, get_sum, category, item, num)
    except ValueError:
        bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —á–∏—Å–ª–∞—Ö')
        bot.register_next_step_handler(message, get_item, category)

# –í–Ω–µ—Å–µ–Ω–∏–µ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
def get_sum(message, category,item,num):
    try:
        sum = float(message.text)
        baza.add_expenses(message.from_user.id, category,item,num,sum)

        bot.send_message(message.from_user.id, '–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.actions())
        bot.register_next_step_handler(message, start)
    except ValueError:
        bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤ —á–∏—Å–ª–∞—Ö')
        bot.register_next_step_handler(message, get_num, category, item)

# –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –î–æ—Ö–æ–¥—ã/–†–∞—Å—Ö–æ–¥—ã
def get_files(message):
    if message.text == 'üìà–î–æ—Ö–æ–¥—ã':
        baza.get_income_file(message.from_user.id)
        file = open('–î–æ—Ö–æ–¥—ã.xlsx', 'rb')
        bot.send_document(message.from_user.id, file, reply_markup=kb.actions())
        bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
        bot.register_next_step_handler(message, start)
    elif message.text == 'üìâ–†–∞—Å—Ö–æ–¥—ã':
        baza.get_expenses_file(message.from_user.id)
        file = open('–†–∞—Å—Ö–æ–¥—ã.xlsx', 'rb')
        bot.send_document(message.from_user.id, file, reply_markup=kb.actions())
        bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
        bot.register_next_step_handler(message, start)


bot.polling()


